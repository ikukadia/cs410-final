{"version":3,"file":"component.js","sourceRoot":"","sources":["../../../../src/compile/scale/component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,OAAO,EAAC,MAAM,WAAW,CAAC;AAGlC,OAAO,EAAO,IAAI,EAAC,MAAM,YAAY,CAAC;AAEtC,OAAO,EAAW,KAAK,EAAC,MAAM,UAAU,CAAC;AAUzC,MAAM,OAAO,cAAe,SAAQ,KAA0B;IAK5D,YAAY,IAAY,EAAE,gBAAqC;QAC7D,KAAK,CACH,EAAE,EAAE,+BAA+B;QACnC,EAAC,IAAI,EAAC,CAAC,oCAAoC;SAC5C,CAAC;QARG,WAAM,GAAG,KAAK,CAAC;QAEf,YAAO,GAAuB,EAAE,CAAC;QAOtC,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,gBAAgB,CAAC,CAAC;IACjD,CAAC;IAED;;OAEG;IACH,IAAW,4BAA4B;QACrC,IAAI,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,KAAK,EAAE;YAC9B,OAAO,IAAI,CAAC;SACb;QACD,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC7B,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE;YACpB,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;SACnF;QACD,OAAO,KAAK,CAAC;IACf,CAAC;CACF","sourcesContent":["import {isArray} from 'vega-util';\nimport {ScaleChannel} from '../../channel';\nimport {Scale, ScaleType} from '../../scale';\nimport {Omit, some} from '../../util';\nimport {VgNonUnionDomain, VgScale} from '../../vega.schema';\nimport {Explicit, Split} from '../split';\n\n/**\n * All VgDomain property except domain.\n * (We exclude domain as we have a special \"domains\" array that allow us merge them all at once in assemble.)\n */\n// TODO: also exclude domainRaw and property implement the right scaleComponent for selection domain\n\nexport type ScaleComponentProps = Omit<VgScale, 'domain'>;\n\nexport class ScaleComponent extends Split<ScaleComponentProps> {\n  public merged = false;\n\n  public domains: VgNonUnionDomain[] = [];\n\n  constructor(name: string, typeWithExplicit: Explicit<ScaleType>) {\n    super(\n      {}, // no initial explicit property\n      {name} // name as initial implicit property\n    );\n    this.setWithExplicit('type', typeWithExplicit);\n  }\n\n  /**\n   * Whether the scale definitely includes zero in the domain\n   */\n  public get domainDefinitelyIncludesZero() {\n    if (this.get('zero') !== false) {\n      return true;\n    }\n    const domains = this.domains;\n    if (isArray(domains)) {\n      return some(domains, d => isArray(d) && d.length === 2 && d[0] <= 0 && d[1] >= 0);\n    }\n    return false;\n  }\n}\n\n// Using Mapped Type to declare type (https://www.typescriptlang.org/docs/handbook/advanced-types.html#mapped-types)\nexport type ScaleComponentIndex = {[P in ScaleChannel]?: ScaleComponent};\n\nexport type ScaleIndex = {[P in ScaleChannel]?: Scale};\n"]}